import { ASSOCIATION_URLS } from "../../constants/urls.js";
import { ERROR_MESSAGES, SUCCESS_MESSAGES } from "../../constants/messages.js";

let selectedAssociationId = null;

// Cargar asociaciones al cargar la p√°gina
document.addEventListener("DOMContentLoaded", async () => {
    try {
        const response = await fetch(ASSOCIATION_URLS.LIST, {
            headers: {
                Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
        });

        if (!response.ok) {
            alert(ERROR_MESSAGES.FETCH_ERROR);
            return;
        }

        const associations = await response.json();
        const tableBody = document.getElementById("adminTableBody");
        tableBody.innerHTML = "";

        associations.forEach((assoc) => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${assoc.name}</td>
                <td>${assoc.description}</td>
                <td>
                    <button class="btn btn-warning btn-sm" data-id="${assoc.id}" data-action="edit">‚úèÔ∏è Editar</button>
                    <button class="btn btn-danger btn-sm" data-id="${assoc.id}" data-action="delete">üóëÔ∏è Eliminar</button>
                </td>
            `;
            tableBody.appendChild(row);
        });

        // Agregar eventos a los botones
        tableBody.addEventListener("click", handleTableActions);
    } catch (error) {
        console.error(error);
        alert(ERROR_MESSAGES.FETCH_ERROR);
    }
});

// Manejo de acciones
async function handleTableActions(event) {
    const button = event.target.closest("button");
    if (!button) return;

    const associationId = button.getAttribute("data-id");
    const action = button.getAttribute("data-action");

    if (action === "edit") {
        selectedAssociationId = associationId;
        const name = button.closest("tr").querySelector("td:nth-child(1)").textContent;
        const description = button.closest("tr").querySelector("td:nth-child(2)").textContent;

        document.getElementById("editName").value = name;
        document.getElementById("editDescription").value = description;

        const bootstrapModal = new bootstrap.Modal(document.getElementById("editModal"));
        bootstrapModal.show();
    } else if (action === "delete") {
        if (confirm("¬øEst√°s seguro de eliminar esta asociaci√≥n?")) {
            try {
                const response = await fetch(ASSOCIATION_URLS.DELETE(associationId), {
                    method: "DELETE",
                    headers: {
                        Authorization: `Bearer ${localStorage.getItem("token")}`,
                    },
                });

                if (response.ok) {
                    alert("Asociaci√≥n eliminada con √©xito.");
                    location.reload();
                } else {
                    alert(ERROR_MESSAGES.FETCH_ERROR);
                }
            } catch (error) {
                console.error(error);
                alert(ERROR_MESSAGES.FETCH_ERROR);
            }
        }
    }
}

// Manejo del formulario de edici√≥n
document.getElementById("editForm").addEventListener("submit", async (e) => {
    e.preventDefault();

    const name = document.getElementById("editName").value;
    const description = document.getElementById("editDescription").value;

    try {
        const response = await fetch(ASSOCIATION_URLS.UPDATE(selectedAssociationId), {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
            body: JSON.stringify({ name, description }),
        });

        if (response.ok) {
            alert("Asociaci√≥n actualizada con √©xito.");
            location.reload();
        } else {
            alert(ERROR_MESSAGES.FETCH_ERROR);
        }
    } catch (error) {
        console.error(error);
        alert(ERROR_MESSAGES.FETCH_ERROR);
    }
});
